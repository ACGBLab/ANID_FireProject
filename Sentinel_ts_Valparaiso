# Authors: Laboratorio de Adaptación Climática y Gestión del Bosque
# This R script allow to obtain Sentinel 2 time series of 4 vegetation indices from aleatory points of fuel categories in decimal degree coordinates
# The script use Google Earth Engine API in RStudio. Before run the script it is necessary to create a conda environment with earthengine-api and set up your computer 


##Trabajar con rgee en R

library(rgee)
library(reticulate)

ee_Initialize()

#Definir las coordenadas y la geometría de la parcela
punto <- ee$Geometry$Point(c(-70.82543788, -32.60725752))
centro <- ee$Geometry$Point(c(-70.82543788, -32.60725752))
radio <- 20
parcela <- centro$buffer(radio)

#Cargar imágenes Sentinel-2 filtradas por fecha y nubosidad
s2Sr <- ee$ImageCollection("COPERNICUS/S2_SR_HARMONIZED")$ 
  filterBounds(parcela)$ 
  filterDate("2023-01-01", "2025-02-28")$ 
  filter(ee$Filter$lt("CLOUDY_PIXEL_PERCENTAGE", 10))

#Recortar imágenes a la parcela
s2Srparcela <- s2Sr$map(function(imagen) {
  imagen$clip(parcela)
})

#Máscara de nubes
s2Clouds <- ee$ImageCollection("COPERNICUS/S2_CLOUD_PROBABILITY")
MAX_CLOUD_PROBABILITY <- 5

maskClouds <- function(img) {
  clouds <- ee$Image(img$get("cloud_mask"))$select("probability")
  isNotCloud <- clouds$lt(MAX_CLOUD_PROBABILITY)
  img$updateMask(isNotCloud)
}

maskEdges <- function(s2_img) {
  s2_img$updateMask(
    s2_img$select("B8A")$mask()$updateMask(s2_img$select("B9")$mask())
  )
}

s2SrWithCloudMask <- ee$Join$saveFirst("cloud_mask")$apply(
  primary = s2Srparcela,
  secondary = s2Clouds,
  condition = ee$Filter$equals(
    leftField = "system:index",
    rightField = "system:index"
  )
)

s2CloudMasked <- ee$ImageCollection(s2SrWithCloudMask)$
  map(maskClouds)$
  map(maskEdges)

#Calcular indices de vegetacion
addind <- function(image) {
  NDVI <- image$normalizedDifference(c("B8", "B4"))$rename("NDVI")$double()
  GNDVI <- image$normalizedDifference(c("B8", "B3"))$rename("GNDVI")$double()
  EVI <- image$expression(
    "2.5 * ((B8 - B4) / (B8 + 6 * B4 - 7.5 * B2 + 1))",
    list(B8 = image$select("B8"), B4 = image$select("B4"), B2 = image$select("B2"))
  )$rename("EVI")$double()
  NDMI <- image$expression(
    "(B8 - B11) / (B8 + B11)",
    list(B8 = image$select("B8"), B11 = image$select("B11"))
  )$rename("NDMI")$double()
  image$addBands(NDVI)$addBands(GNDVI)$addBands(EVI)$addBands(NDMI)
}

indices <- s2CloudMasked$map(addind)

#Calcular la mediana de cada índice por imagen
indicesMed <- indices$map(function(image) {
  mediana <- image$reduceRegion(
    reducer = ee$Reducer$median(),
    scale = 10,
    bestEffort = TRUE,
    maxPixels = 1e13
  )
  ee$Feature(NULL, list(
    NDVI_med = mediana$get("NDVI"),
    GNDVI_med = mediana$get("GNDVI"),
    EVI_med = mediana$get("EVI"),
    NDMI_med = mediana$get("NDMI")
  ))
})

#Exportar datos a Google Drive
##indicescsv <- ee$FeatureCollection(indicesMed)
##ee$batch$Export$table$toDrive(
##collection = indicescsv,
##description = "indicesvegetacion",
##fileFormat = "CSV")

indicesMedlist <- indicesMed$getInfo()
indices_df <- do.call(rbind, lapply(indicesMedlist$features, function(feature) {
 c(
    imagen = feature$id,
    NDVI_med = feature$properties$NDVI_med,
    GNDVI_med = feature$properties$GNDVI_med,
    EVI_med = feature$properties$EVI_med,
    NDMI_med = feature$properties$NDMI_med)}))

indices_df <- as.data.frame(indices_df)
indices_df$Fecha <- as.Date(substr(indices_df$imagen, 1, 8), format="%Y%m%d")
indices_df$Categoria <- 1
indices_df <- indices_df[c("Fecha", "Categoria", setdiff(names(indices_df), c("Fecha", "Categoria")))]
indices_df$Fecha <- as.Date(indices_df$Fecha, format = "%d-%m-%Y")
head(indices_df)

#Guardar csv
write.csv(indices_df, "p1_c1_2.csv")


