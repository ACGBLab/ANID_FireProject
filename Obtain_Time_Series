#' @title Script para Extracción de Series de Tiempo con rgee y Sentinel-2
#' @author Laboratorio de Adaptación Climática y Gestión del Bosque
#' @date 2025-07-21
#' @description Este script extrae series de tiempo para múltiples índices de vegetación
#'              (NDVI, EVI, GNDVI, NDMI) para un conjunto de puntos de muestreo.
#'              Utiliza el paquete 'rgee' para procesar imágenes de la colección
#'              Sentinel-2 directamente en Google Earth Engine, evitando la descarga de datos.
#'              La estructura del script mantiene un bucle 'for' para procesar cada punto individualmente.
#' @details
#' Pasos del script:
#' 1. Carga las librerías y define las rutas y parámetros.
#' 2. Define las funciones para enmascarar nubes y calcular los 4 índices en GEE.
#' 3. Carga los puntos desde un archivo Excel.
#' 4. Itera sobre cada punto, extrae la serie de tiempo para los 4 índices y almacena el resultado.
#' 5. Combina los resultados y los guarda en formato CSV y RDS.

# ==============================================================================
# 0. CONFIGURACIÓN Y LIBRERÍAS
# ==============================================================================

# Cargar librerías necesarias
library(rgee)
library(sf)
library(tidyverse)
library(readxl)

# --- Definir rutas y parámetros ---
dir_entrada <- "datos/entrada"
dir_salida <- "resultados"
archivo_puntos_xlsx <- "Puntos_Finales.xlsx"
nombre_hoja_puntos <- "Puntos"
archivo_salida_base <- "series_de_tiempo_todos_indices"

# Parámetros de GEE
coleccion_gee <- "COPERNICUS/S2_SR_HARMONIZED" # Sentinel-2 L2A Harmonized
fecha_inicio <- "2020-01-01"
fecha_fin <- "2023-12-31"
max_nubosidad <- 20 # Porcentaje máximo de nubosidad por escena

# ==============================================================================
# 1. INICIALIZACIÓN DE RGEE
# ==============================================================================

ee_Initialize(drive = TRUE)

# ==============================================================================
# 2. FUNCIONES PARA PROCESAMIENTO EN GOOGLE EARTH ENGINE
# ==============================================================================

# --- Función para enmascarar nubes en Sentinel-2 ---
maskS2clouds <- function(image) {
  qa <- image$select('SCL') # SCL es la banda de clasificación de escena
  # Bits 8 y 9 son nubes. Bit 3 es sombra de nube.
  cloudShadowBitMask <- bitwShiftL(1, 3)
  cloudsBitMask <- bitwShiftL(1, 9)
  
  mask <- qa$bitwiseAnd(cloudShadowBitMask)$eq(0)$
    And(qa$bitwiseAnd(cloudsBitMask)$eq(0))
  
  # Las bandas de Sentinel-2 se escalan por 10000
  return(image$updateMask(mask)$divide(10000))
}

# --- Funciones para calcular índices de vegetación ---
add_ndvi <- function(image) {
  ndvi <- image$normalizedDifference(c('B8', 'B4'))$rename('NDVI')
  return(image$addBands(ndvi))
}

add_gndvi <- function(image) {
  gndvi <- image$normalizedDifference(c('B8', 'B3'))$rename('GNDVI')
  return(image$addBands(gndvi))
}

add_ndmi <- function(image) {
  ndmi <- image$normalizedDifference(c('B8', 'B11'))$rename('NDMI')
  return(image$addBands(ndmi))
}

add_evi <- function(image) {
  evi <- image$expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
    list(
      'NIR' = image$select('B8'),
      'RED' = image$select('B4'),
      'BLUE' = image$select('B2')
    )
  )$rename('EVI')
  return(image$addBands(evi))
}


# ==============================================================================
# 3. CARGA Y PREPARACIÓN DE PUNTOS DE MUESTREO
# ==============================================================================

# Cargar puntos desde Excel
ruta_puntos <- file.path(dir_entrada, archivo_puntos_xlsx)
puntos_df <- read_excel(ruta_puntos, sheet = nombre_hoja_puntos)

# Convertir a objeto 'sf' con CRS WGS84 (estándar para GEE)
puntos_sf <- st_as_sf(puntos_df, coords = c("Longitud", "Latitud"), crs = 4326) %>%
  mutate(Point_ID = row_number())

print(paste("Se cargaron", nrow(puntos_sf), "puntos de muestreo."))

# ==============================================================================
# 4. EXTRACCIÓN DE SERIES DE TIEMPO (BUCLE `for`)
# ==============================================================================

# Crear una lista vacía para almacenar la serie de tiempo de cada punto
lista_series_tiempo <- list()

# Bucle para iterar sobre cada punto de muestreo
for (i in 1:nrow(puntos_sf)) {
  
  punto_actual_sf <- puntos_sf[i, ]
  punto_actual_ee <- sf_as_ee(punto_actual_sf)
  
  # Filtrar la colección de Sentinel-2 por fecha, nubosidad y ubicación
  coleccion_procesada <- ee$ImageCollection(coleccion_gee) %>%
    ee$ImageCollection$filterDate(fecha_inicio, fecha_fin) %>%
    ee$ImageCollection$filter(ee$Filter$lt('CLOUDY_PIXEL_PERCENTAGE', max_nubosidad)) %>%
    ee$ImageCollection$filterBounds(punto_actual_ee) %>%
    ee$ImageCollection$map(maskS2clouds) %>%
    ee$ImageCollection$map(add_ndvi) %>%
    ee$ImageCollection$map(add_gndvi) %>%
    ee$ImageCollection$map(add_ndmi) %>%
    ee$ImageCollection$map(add_evi)

  # Extraer los valores para el punto actual
  serie_punto_actual <- ee_extract(
    x = coleccion_procesada,
    y = punto_actual_ee,
    fun = ee$Reducer$mean(),
    sf = FALSE # Devolver como data.frame
  )
  
  # Procesar y limpiar la tabla de resultados
  if (nrow(serie_punto_actual) > 0) {
    serie_procesada <- serie_punto_actual %>%
      pivot_longer(
        cols = -id, # Todas las columnas excepto el ID del punto
        names_to = "variable",
        values_to = "valor"
      ) %>%
      # Extraer fecha e índice del nombre de la columna
      mutate(
        fecha = as.Date(str_extract(variable, "[0-9]{8}"), format = "%Y%m%d"),
        indice = str_extract(variable, "NDVI|EVI|GNDVI|NDMI")
      ) %>%
      filter(!is.na(indice)) %>% # Mantener solo las filas con índices
      select(fecha, indice, valor) %>%
      mutate(Point_ID = punto_actual_sf$Point_ID)
      
    lista_series_tiempo[[i]] <- serie_procesada
    
    print(paste("Procesado punto:", i, "/", nrow(puntos_sf)))
  } else {
    print(paste("Advertencia: No se encontraron imágenes sin nubes para el punto:", i))
  }
}

# Combinar todos los data.frames de la lista en uno solo
series_final_df <- do.call(rbind, lista_series_tiempo)

# ==============================================================================
# 5. GUARDADO DE RESULTADOS
# ==============================================================================

# Construir rutas de salida
ruta_salida_rds <- file.path(dir_salida, paste0(archivo_salida_base, ".rds"))
ruta_salida_csv <- file.path(dir_salida, paste0(archivo_salida_base, ".csv"))

# Guardar los datos
saveRDS(series_final_df, ruta_salida_rds)
write.csv(series_final_df, ruta_salida_csv, row.names = FALSE)

print("¡Proceso completado! Las series de tiempo para todos los índices han sido guardadas.")
